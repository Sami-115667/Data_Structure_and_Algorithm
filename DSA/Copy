#include <bits/stdc++.h>
using namespace std;
#define FAST                                                                   \
  ios_base::sync_with_stdio(false);                                            \
  cin.tie(NULL);


  void maxheapify(vector<int>& arr,int size,int i){
    int largest=i;
    int l=(2*i)+1;
    int r=l+1;
    //cout<<i<<endl;
    while(l<size && arr[largest]<arr[l]){
        largest=l;
    }
   // cout<<largest<<endl;
     while(r<size && arr[largest]<arr[r]){
        largest=r;
    }
   //cout<<largest<<endl;
    if(largest!=i){
        swap(arr[largest],arr[i]);
        maxheapify(arr, size, largest);
    }
  }

  void minheapify(int arr[],int size,int i){
    int largest=i;
    int l=(2*i)+1;
    int r=l+1;
    while(l<size && arr[largest]>arr[l]){      //heapify method
        largest=l;
    }
     while(r<size && arr[largest]>arr[r]){
        largest=r;
    }
    if(largest!=i){
        swap(arr[largest],arr[i]);
        minheapify(arr, size, largest);
    }
  }


  void InsertInHeap(vector<int> &v,int size,int value){
   // size=size+1;
    //cout<<size<<endl;
    v.push_back(value);
    int i=size;
    while(i>1){
        int parent=i/2;
        if(v[parent]<v[i])
       {
         swap(v[parent],v[i]);
         i=parent;
       }
        else
        return ;
    }
  }


int main() {

  FAST

  vector<int>v;
  v.push_back(1);
  v.push_back(2);
  v.push_back(3);                        // Inster at heap from an array

 // cout<<v.size()/2-1<<endl;
  for(int i=(v.size()/2)-1;i>=0;i--)
  maxheapify(v, v.size()-1,i);    //Inset time complexity O(log n);
                                                // delete a heap time complexity O(log n)
  for(int i=0;i<v.size();i++)                     // Extract min heap max heap time complexity O(1)
  cout<<v[i]<<" ";
  cout<<endl;


  vector<int>v1;
  v1.push_back(0);
  InsertInHeap(v1, v1.size(), 1);
  InsertInHeap(v1, v1.size(), 2);                 //Insert at heap one by one 
  InsertInHeap(v1, v1.size(), 3);
  //cout<<v1.size()<<endl;
      for(int i=1;i<v1.size();i++)
      cout<<v1[i]<<" "; 
      cout<<endl;



      vector<int>v2={10,5,6,2,12,7,9};            //merge two heap time complexity O(m+n)
      for(int i=(v2.size()/2)-1;i>=0;i--)
      maxheapify(v2, v2.size()-1, i);
      for(int i=0;i<v2.size();i++)                     // Extract min heap max heap time complexity O(1)
        cout<<v2[i]<<" ";
    cout<<endl;



  return 0;
}